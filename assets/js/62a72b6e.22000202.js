"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[715],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=i(n),m=o,v=u["".concat(s,".").concat(m)]||u[m]||d[m]||c;return n?r.createElement(v,a(a({ref:t},l),{},{components:n})):r.createElement(v,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var i=2;i<c;i++)a[i]=n[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5058:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return i},toc:function(){return l},default:function(){return u}});var r=n(7462),o=n(3366),c=(n(7294),n(3905)),a=["components"],p={},s="Web Socket Server",i={unversionedId:"advanced-examples/web-socket-advanced",id:"advanced-examples/web-socket-advanced",isDocsHomePage:!1,title:"Web Socket Server",description:"",source:"@site/docs/advanced-examples/web-socket-advanced.md",sourceDirName:"advanced-examples",slug:"/advanced-examples/web-socket-advanced",permalink:"/zio-http/docs/advanced-examples/web-socket-advanced",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Streaming Response",permalink:"/zio-http/docs/advanced-examples/stream-response"}},l=[],d={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,c.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"web-socket-server"},"Web Socket Server"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\nimport zhttp.service._\nimport zhttp.socket._\nimport zio._\nimport zio.duration._\nimport zio.stream.ZStream\n\nobject WebSocketAdvanced extends App {\n  // Message Handlers\n  private val open = Socket.succeed(WebSocketFrame.text("Greetings!"))\n\n  private val echo = Socket.collect[WebSocketFrame] { case WebSocketFrame.Text(text) =>\n    ZStream.repeat(WebSocketFrame.text(s"Received: $text")).schedule(Schedule.spaced(1 second)).take(3)\n  }\n\n  private val fooBar = Socket.collect[WebSocketFrame] {\n    case WebSocketFrame.Text("FOO") => ZStream.succeed(WebSocketFrame.text("BAR"))\n    case WebSocketFrame.Text("BAR") => ZStream.succeed(WebSocketFrame.text("FOO"))\n  }\n\n  // Setup protocol settings\n  private val protocol = SocketProtocol.subProtocol("json")\n\n  // Setup decoder settings\n  private val decoder = SocketDecoder.allowExtensions\n\n  // Combine all channel handlers together\n  private val socketApp =\n    SocketApp.open(open) ++ // Called after the request is successfully upgraded to websocket\n      SocketApp.message(echo merge fooBar) ++ // Called after each message being received on the channel\n      SocketApp.close(_ => console.putStrLn("Closed!").ignore) ++ // Called after the connection is closed\n      SocketApp.error(_ =>\n        console.putStrLn("Error!").ignore,\n      ) ++ // Called whenever there is an error on the socket channel\n      SocketApp.decoder(decoder) ++\n      SocketApp.protocol(protocol)\n\n  private val app =\n    Http.collect[Request] {\n      case Method.GET -> !! / "greet" / name  => Response.text(s"Greetings ${name}!")\n      case Method.GET -> !! / "subscriptions" => socketApp\n    }\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    Server.start(8090, app).exitCode\n}\n\n')))}u.isMDXComponent=!0}}]);